import asyncio
import websockets
import json
import sys
import os
import time
import random
import logging

# Add the Xeryon library path to sys.path
sys.path.append('/home/pi/Desktop/RemoteDemoStation/BasicServer/Python')
from Xeryon import Xeryon, Stage, Units  # Import Xeryon library components

# Set up logging (DEBUG for visibility)
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration
STATION_ID = "RPI1"
COM_PORT = "/dev/ttyACM0"
SPEED_MULTIPLIER = 1
SERVER_URL = f"wss://xeryonremotedemostation.replit.app/rpi/{STATION_ID}"
RETRY_DELAY = 2  # Seconds to wait before retrying
EPOS_UPDATE_INTERVAL = 0.05  # 5 Hz (was 0.1 for 10 Hz)

# Global variables
controller = None
axis = None
demo_running = False

def initialize_xeryon_controller():
    """Initialize the Xeryon controller and axis with retry logic."""
    global controller, axis
    while True:
        try:
            logger.info(f"Initializing Xeryon controller on {COM_PORT}")
            controller = Xeryon(COM_port=COM_PORT, baudrate=115200)
            axis = controller.addAxis(Stage.XLA_312_3N, "X")
            logger.info("Axis X added with stage XLA-312-3N")
            controller.start()
            logger.info("Xeryon controller started")
            axis.setUnits(Units.mm)
            axis.sendCommand("POLI=50")
            logger.info("Finding index for axis X")
            axis.findIndex()
            logger.info("Index found for axis X")
            base_speed = 500
            multiplied_speed = base_speed * SPEED_MULTIPLIER
            axis.setSpeed(multiplied_speed)
            logger.info(f"Speed set to {multiplied_speed} mm/s (base {base_speed} mm/s * {SPEED_MULTIPLIER})")
            return  # Success, exit loop
        except Exception as e:
            logger.error(f"Failed to initialize Xeryon controller: {str(e)}. Retrying in {RETRY_DELAY} seconds...")
            if controller:
                stop_controller(controller)
                controller = None
                axis = None
            time.sleep(RETRY_DELAY)

def stop_controller(ctrl):
    """Safely stop the controller if it?s running."""
    try:
        if ctrl:
            ctrl.stop()
            logger.info("Controller stopped")
    except Exception as e:
        logger.error(f"Error stopping controller: {str(e)}")

async def run_demo():
    """Run a demo with random steps and scans."""
    global demo_running, axis
    demo_running = True
    logger.info("Demo started")
    for _ in range(100):
        if not demo_running or not axis:
            break
        try:
            speed = random.uniform(10, 500)
            await asyncio.to_thread(axis.setSpeed, speed)
            logger.info(f"Demo: Set speed to {speed} mm/s")
            action = random.choice(["step", "scan"])
            if action == "step":
                direction = random.choice([1, -1])
                await asyncio.to_thread(axis.step, direction)
                logger.info(f"Demo: Stepping {direction} mm")
                await asyncio.sleep(0.5)
            else:
                direction = random.choice([1, -1])
                await asyncio.to_thread(axis.startScan, direction)
                logger.info(f"Demo: Scanning {'right' if direction == 1 else 'left'}")
                await asyncio.sleep(random.uniform(0.5, 2))
                await asyncio.to_thread(axis.stopScan)
                logger.info("Demo: Scan stopped")
        except Exception as e:
            logger.error(f"Demo error: {str(e)}. Stopping demo...")
            demo_running = False
            break
    if demo_running:
        logger.info("Demo completed 100 iterations")
        try:
            await asyncio.to_thread(axis.setDPOS, 0)
            logger.info("Demo: Set DPOS to 0 mm")
        except Exception as e:
            logger.error(f"Error resetting DPOS: {str(e)}")
    demo_running = False

async def stream_epos(websocket):
    """Stream EPOS value to the WebSocket server every 0.2 seconds (5 Hz)."""
    global axis
    while True:
        try:
            if axis:
                epos = axis.getEPOS()  # Fetch EPOS using Xeryon.py method
                position_data = {
                        "type": "position_update",
                        "rpiId": STATION_ID,
                        "epos": epos,
                        "timestamp": datetime.now().isoformat()
                await websocket.send(json.dumps(position_data))
                logger.info(f"Streamed EPOS: {epos} mm")
            else:
                logger.warning("Axis not initialized, skipping EPOS stream")
            await asyncio.sleep(EPOS_UPDATE_INTERVAL)
        except Exception as e:
            logger.error(f"EPOS streaming error: {str(e)}. Continuing...")
            break  # Break to reconnect in outer loop

async def connect_to_server():
    """Connect to WebSocket server, process commands, and stream EPOS with reconnection."""
    global controller, axis, demo_running
    while True:
        try:
            if not controller or not axis:
                initialize_xeryon_controller()

            logger.info(f"Connecting to {SERVER_URL}")
            async with websockets.connect(SERVER_URL, ping_interval=20, ping_timeout=60) as websocket:
                logger.info(f"Connected to server as {STATION_ID} via {SERVER_URL}")
                await websocket.send(json.dumps({
                    "status": "ready",
                    "message": "RPi device online and ready",
                    "type": "register",
                    "rpi_id": STATION_ID
                }))
                last_keepalive = time.time()

                epos_task = asyncio.create_task(stream_epos(websocket))

                while True:
                    try:
                        message = await asyncio.wait_for(websocket.recv(), timeout=10)
                        data = json.loads(message)
                        logger.info(f"COMMAND RECEIVED FROM UI: {data.get('command', 'unknown')} - DIRECTION: {data.get('direction', 'none')}")
                        response = await process_command(data.get("command", "unknown"), data.get("direction", "none"))
                        await websocket.send(json.dumps(response))
                    except asyncio.TimeoutError:
                        if time.time() - last_keepalive > 60:
                            await websocket.ping()
                            last_keepalive = time.time()
                    except Exception as e:
                        logger.error(f"WebSocket error: {str(e)}. Reconnecting...")
                        epos_task.cancel()
                        break
        except Exception as e:
            logger.error(f"Connection to {SERVER_URL} failed: {str(e)}. Retrying in {RETRY_DELAY} seconds...")
            if controller:
                stop_controller(controller)
                controller = None
                axis = None
            await asyncio.sleep(RETRY_DELAY)

async def process_command(command, direction):
    """Map WebSocket commands to Xeryon methods with error handling and threading."""
    global demo_running, axis
    start_time = time.time()
    logger.info(f"Command start: {command} at {start_time}")
    response = {"status": "success", "rpi_id": STATION_ID, "message": f"Command '{command}' executed with direction '{direction}'"}
    try:
        if not axis:
            raise Exception("Axis not initialized")
        
        if command == "speed":
            speed_value = float(direction)
            multiplied_speed = speed_value * SPEED_MULTIPLIER
            await asyncio.to_thread(axis.setSpeed, multiplied_speed)
            response["message"] = f"Speed set to {multiplied_speed} mm/s"
            logger.info(response["message"])
        elif command == "scan":
            if direction == "right":
                await asyncio.to_thread(axis.startScan, 1)
                logger.info("Scanning right")
            elif direction == "left":
                await asyncio.to_thread(axis.startScan, -1)
                logger.info("Scanning left")
            else:
                response["status"] = "error"
                response["message"] = "Invalid direction for scan command"
                logger.info(f"Invalid direction: {direction}")
        elif command == "move":
            if direction == "right":
                await asyncio.to_thread(axis.step, 1)
                logger.info("Stepping 1 mm right")
            elif direction == "left":
                await asyncio.to_thread(axis.step, -1)
                logger.info("Stepping 1 mm left")
            else:
                response["status"] = "error"
                response["message"] = "Invalid direction for move command"
                logger.info(f"Invalid direction: {direction}")
        elif command == "demo_start":
            if not demo_running:
                asyncio.create_task(run_demo())
                response["message"] = "Demo started"
                logger.info("Starting demo")
            else:
                response["message"] = "Demo already running"
        elif command == "demo_stop":
            if demo_running:
                demo_running = False
                await asyncio.to_thread(axis.stopScan)
                await asyncio.to_thread(axis.setDPOS, 0)
                response["message"] = "Demo stopped"
                logger.info("Demo stopped, DPOS set to 0 mm")
            else:
                response["message"] = "No demo running"
        elif command == "stop":
            await asyncio.to_thread(axis.stopScan)
            await asyncio.to_thread(axis.setDPOS, 0)
            logger.info("Stopped movement, DPOS set to 0 mm")
        else:
            response["status"] = "error"
            response["message"] = f"Unknown command: {command}"
            logger.info(f"Unknown command: {command}")
    except Exception as e:
        response["status"] = "error"
        response["message"] = f"Command execution failed: {str(e)}"
        logger.error(f"Command error: {str(e)}")
    end_time = time.time()
    logger.info(f"Command end: {command} took {end_time - start_time:.3f}s")
    return response

if __name__ == "__main__":
    logger.info(f"Starting RPI WebSocket client for {STATION_ID}")
    try:
        asyncio.run(connect_to_server())
    except KeyboardInterrupt:
        logger.info("Keyboard interrupt received, shutting down")
    except Exception as e:
        logger.error(f"Fatal error: {str(e)}")
    finally:
        if controller:
            stop_controller(controller)
