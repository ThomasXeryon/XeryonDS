import asyncio
import websockets
import json
import base64
import cv2
import time
import sys
import logging
from picamera2 import Picamera2

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Hardcode station ID
STATION_ID = "RPI1"
SERVER_URL = f"wss://xeryonremotedemostation.replit.app/rpi/{STATION_ID}"
RETRY_DELAY = 2

def initialize_camera():
    """Initialize the Pi Camera Module 3 Wide with picamera2."""
    while True:
        try:
            picam2 = Picamera2()
            config = picam2.create_video_configuration(main={"size": (1920, 1080), "format": "RGB888"})
            picam2.configure(config)
            picam2.start()
            logger.info("Pi Camera Module 3 Wide initialized: 1920x1080 RGB")
            return picam2
        except Exception as e:
            logger.error(f"Failed to initialize Pi Camera: {str(e)}. Retrying in {RETRY_DELAY} seconds...")
            time.sleep(RETRY_DELAY)

def stop_camera(picam2):
    """Safely stop the camera if itâ€™s running."""
    try:
        if picam2 and picam2.started:
            picam2.stop()
            logger.info("Camera stopped")
    except Exception as e:
        logger.error(f"Error stopping camera: {str(e)}")

async def send_camera_feed():
    picam2 = None
    while True:
        try:
            if not picam2 or not picam2.started:
                if picam2:
                    stop_camera(picam2)
                picam2 = initialize_camera()

            logger.info(f"Connecting to {SERVER_URL}")
            async with websockets.connect(SERVER_URL, ping_interval=20, ping_timeout=60) as websocket:
                logger.info(f"Connected to WebSocket server at {SERVER_URL}")
                
                registration_data = {
                    "type": "register",
                    "status": "ready",
                    "message": f"RPi {STATION_ID} online with Pi Camera Module 3 Wide",
                    "rpi_id": STATION_ID
                }
                await websocket.send(json.dumps(registration_data))
                logger.info(f"Sent registration message: {registration_data}")
                
                frame_count = 0
                start_time = time.time()
                last_keepalive = time.time()
                while True:
                    frame_start = time.time()
                    
                    try:
                        frame = picam2.capture_array("main")  # RGB888 format
                        logger.debug(f"Frame captured: shape={frame.shape}, dtype={frame.dtype}")
                    except Exception as e:
                        logger.error(f"Camera capture failed: {str(e)}. Reinitializing camera...")
                        stop_camera(picam2)
                        picam2 = None
                        break
                    
                    capture_time = time.time() - frame_start
                    
                    encode_start = time.time()
                    try:
                        _, jpg_buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 20])
                        jpg_as_text = base64.b64encode(jpg_buffer).decode('utf-8')
                    except Exception as e:
                        logger.error(f"Encoding failed: {str(e)}. Continuing...")
                        continue
                    encode_time = time.time() - encode_start
                    
                    send_start = time.time()
                    frame_data = {
                        "type": "camera_frame",
                        "rpi_id": STATION_ID,
                        "frame": jpg_as_text
                    }
                    await websocket.send(json.dumps(frame_data))
                    send_time = time.time() - send_start
                    
                    frame_count += 1
                    if frame_count % 10 == 0:
                        elapsed_time = time.time() - start_time
                        fps = frame_count / elapsed_time
                        logger.info(f"FPS: {fps:.2f}, Timing - Capture: {capture_time*1000:.0f}ms, Encode: {encode_time*1000:.0f}ms, Send: {send_time*1000:.0f}ms")
                        frame_count = 0
                        start_time = time.time()

                    if time.time() - last_keepalive > 60:
                        await websocket.ping()
                        last_keepalive = time.time()
                    
                    try:
                        await asyncio.wait_for(websocket.recv(), 0.005)
                    except asyncio.TimeoutError:
                        pass
                    except Exception as e:
                        logger.error(f"WebSocket recv error: {str(e)}. Reconnecting...")
                        break
        
        except Exception as e:
            logger.error(f"Outer loop error: {str(e)}. Retrying in {RETRY_DELAY} seconds...")
            if picam2:
                stop_camera(picam2)
                picam2 = None
            await asyncio.sleep(RETRY_DELAY)

if __name__ == "__main__":
    logger.info(f"Starting camera feed from RPi {STATION_ID}")
    try:
        asyncio.run(send_camera_feed())
    except KeyboardInterrupt:
        logger.info("Camera feed stopped by user")
    except Exception as e:
        logger.error(f"Main loop crashed unexpectedly: {str(e)}")
    finally:
        if 'picam2' in locals() and picam2:
            stop_camera(picam2)